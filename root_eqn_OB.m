function F = root_eqn_OB(y, N, x_spl, Wi, beta, A0mat, f0, fp0, fpN, TxxN, ...
    TxypN, TyypN)

% Define the derivatives of f and g as inline functions
f1p = @(z) A0mat(2 : end, 2 : end) * z(1 : x_spl(1)) + A0mat(2 : end, 1) * f0;
g1p = @(z) A0mat(2 : end - 1, 2 : end - 1) * z(x_spl(1) + 1 : x_spl(2)) ...
    + A0mat(2 : end - 1, 1) * fp0 + A0mat(2 : end - 1, end) * fpN;
h1p = @(z) A0mat * z(x_spl(2) + 1 : x_spl(3));

% Set up BCs for Tau functions
TauxxN = TxxN;
TauxypN = @(z) TxypN - A0mat(end, :) * z(x_spl(2) + 1 : x_spl(3));
TauyypN = @(z) TyypN + 2 * z(x_spl(3));

% Define the derivative of Txx as an inline functions
Tauxx1p = @(z) A0mat(1 : end - 1, 1 : end - 1) * z(x_spl(3) + 1 : x_spl(4)) ...
    + A0mat(1 : end - 1, end) * TauxxN;
Tauxy1p = @(z) A0mat(1 : end - 1, 1 : end - 1) * z(x_spl(5) + 1 : x_spl(6) - 1) ...
    + A0mat(1 : end - 1, end) * z(x_spl(6));
Tauyy1p = @(z) A0mat(1 : end - 1, 1 : end - 1) * z(x_spl(7) + 1 : x_spl(8) - 1) ...
    + A0mat(1 : end - 1, end) * z(x_spl(8));

% Write the system as six inline functions
F1 = @(z) f1p(z) - [z(x_spl(1) + 1 : x_spl(2)); fpN];
F2 = @(z) g1p(z) - z(x_spl(2) + 2 : x_spl(3) - 1);
F3 = @(z) Tauxx1p(z) - z(x_spl(4) + 1 : x_spl(5) - 1);
F4 = @(z) Tauxy1p(z) - z(x_spl(6) + 1 : x_spl(7));
F5 = @(z) Tauyy1p(z) - z(x_spl(8) + 1 : x_spl(9));
F6 = @(z) -1 + [fp0; z(x_spl(1) + 1 : x_spl(2)); fpN] .^ 2 - h1p(z) ...
    - [z(x_spl(6) + 1 : x_spl(7)); TauxypN(z)] - z(x_spl(2) + 1 : x_spl(3)) ...
    .* [f0; z(1 : x_spl(1))] - 2 * [z(x_spl(3) + 1 : x_spl(4)); TauxxN];
F7 = @(z) [z(x_spl(3) + 1 : x_spl(4)); TauxxN] - (z(x_spl(4) + 1 : x_spl(5)) ...
    .* [f0; z(1 : x_spl(1))] + 2 * z(x_spl(2) + 1 : x_spl(3)) ...
    .* ((1 - beta) * z(x_spl(2) + 1 : x_spl(3)) + z(x_spl(5) + 1 : x_spl(6)))) ...
    * Wi;
F8 = @(z) -(((1 - beta) * h1p(z) + [z(x_spl(6) + 1 : x_spl(7)); TauxypN(z)]) ...
    .* [f0; z(1 : x_spl(1))] + z(x_spl(2) + 1 : x_spl(3)) ...
    .* (-3 * (1 - beta) * [fp0; z(x_spl(1) + 1 : x_spl(2)); fpN] ...
    + z(x_spl(7) + 1 : x_spl(8)))) * Wi + z(x_spl(5) + 1 : x_spl(6)) ...
    .* (1 + [fp0; z(x_spl(1) + 1 : x_spl(2)); fpN] * Wi);
F9 = @(z) z(x_spl(7) + 1 : x_spl(8)) - (-2 * (1 - beta) ...
    * z(x_spl(2) + 1 : x_spl(3)) + [z(x_spl(8) + 1 : x_spl(9)); TauyypN(z)]) ...
    .* [f0; z(1 : x_spl(1))] * Wi + 2 * [fp0; z(x_spl(1) + 1 : x_spl(2)); fpN] ...
    .* (-2 * (1 - beta) * [fp0; z(x_spl(1) + 1 : x_spl(2)); fpN] ...
    + z(x_spl(7) + 1 : x_spl(8))) * Wi;

% Write the whole system as a single vector of functions
F(1 : N) = F1(y);
F(N + 1 : 2 * N - 1) = F2(y);
F(2 * N : 3 * N - 1) = F3(y);
F(3 * N : 4 * N - 1) = F4(y);
F(4 * N : 5 * N - 1) = F5(y);
F(5 * N : 6 * N) = F6(y);
F(6 * N + 1 : 7 * N + 1) = F7(y);
F(7 * N + 2 : 8 * N + 2) = F8(y);
F(8 * N + 3 : 9 * N + 3) = F9(y);
